import tkinter as tk
from tkinter import messagebox, ttk

# Custom input widget
class InputWidget(tk.Frame):
    def __init__(self, parent):
        super().__init__(parent)

        self.entry_label = tk.Label(self, text="Text:")
        self.entry = tk.Entry(self, width=35)
        self.spin_label = tk.Label(self, text="Shift (1-25):")
        self.spinbox = tk.Spinbox(self, from_=1, to=25, width=5)

        self.entry_label.grid(row=0, column=0, padx=5, pady=5, sticky="e")
        self.entry.grid(row=0, column=1, padx=5, pady=5, sticky="ew")
        self.spin_label.grid(row=0, column=2, padx=5, pady=5, sticky="e")
        self.spinbox.grid(row=0, column=3, padx=5, pady=5, sticky="w")

        self.columnconfigure(1, weight=1)

# Custom result display widget
class ResultWidget(tk.Frame):
    def __init__(self, parent):
        super().__init__(parent)

        self.result_label = tk.Label(self, text="Output:")
        self.result_var = tk.StringVar(self)
        self.result_entry = tk.Entry(self, textvariable=self.result_var, state="readonly", width=35)

        self.result_label.grid(row=0, column=0, padx=5, pady=5, sticky="e")
        self.result_entry.grid(row=0, column=1, padx=5, pady=5, sticky="ew")

        self.columnconfigure(1, weight=1)

# Cipher GUI
class CipherGUI(tk.Tk):
    def __init__(self):
        super().__init__()

        self.title("Caesar Cipher Tool")
        self.style = ttk.Style(self)
        self.style.theme_use("clam")

        self.input_widget = InputWidget(self)
        self.input_widget.grid(row=0, column=0, padx=10, pady=10, sticky="ew")

        self.mode = tk.StringVar(value="decode")
        self.encode_button = ttk.Radiobutton(self, text="Encode", variable=self.mode, value="encode")
        self.decode_button = ttk.Radiobutton(self, text="Decode", variable=self.mode, value="decode")
        self.encode_button.grid(row=1, column=0, padx=10, pady=5, sticky="w")
        self.decode_button.grid(row=1, column=0, padx=10, pady=5, sticky="e")

        self.apply_button = ttk.Button(self, text="Apply", command=self.apply)
        self.apply_button.grid(row=2, column=0, padx=10, pady=5, sticky="ew")

        self.result_widget = ResultWidget(self)
        self.result_widget.grid(row=3, column=0, padx=10, pady=10, sticky="ew")

        self.columnconfigure(0, weight=1)

    def caesar_cipher(self, text, shift, mode):
        result_text = []
        for char in text:
            if char.isalpha():
                ascii_offset = 65 if char.isupper() else 97
                # The shift value is modded by 26 to ensure it wraps around the alphabet
                shift = shift % 26
                if mode == "decode":
                    # Decoding requires shifting left, so we subtract the shift
                    alpha_index = (ord(char) - ascii_offset - shift) % 26
                else:
                    # Encoding requires shifting right, so we add the shift
                    alpha_index = (ord(char) - ascii_offset + shift) % 26
                result_char = chr(alpha_index + ascii_offset)
                result_text.append(result_char)
            else:
                result_text.append(char)
        return ''.join(result_text)

    def apply(self):
        text = self.input_widget.entry.get().upper()  # Convert text to uppercase
        shift = int(self.input_widget.spinbox.get())
        mode = self.mode.get()

        if text:
            output_text = self.caesar_cipher(text, shift, mode)
            self.result_widget.result_var.set(output_text)
        else:
            messagebox.showinfo("Info", "Please enter some text.")

if __name__ == "__main__":
    app = CipherGUI()
    app.mainloop()
